Main.java 
package com.company;


import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

public class Main {


    // The main method that creates and runs the GUI
    public static void main(String[] args) {
        Inventory inventory = new Inventory(); // create an inventory object
        // add some sample items to the inventory
        inventory.addItem(new Item(1001, "T-shirt", 10, 9.99, "Clothing"));
        inventory.addItem(new Item(1002, "Jeans", 5, 19.99, "Clothing"));
        inventory.addItem(new Item(2001, "Laptop", 3, 499.99, "Electronics"));
        inventory.addItem(new Item(2002, "Smartphone", 7, 299.99, "Electronics"));
        inventory.addItem(new Item(3001, "Bread", 20, 1.99, "Food"));
        inventory.addItem(new Item(3002, "Milk", 15, 2.99, "Food"));

        InventoryGUI gui = new InventoryGUI(inventory); // create a GUI object with the inventory object
    }
}

Inventory.java
package com.company;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public  class Inventory {
    private ArrayList<Item> items; // a list of items in the inventory
    private double totalValue; // the total value of the inventory

    // A constructor that creates an empty inventory
    public Inventory() {
        items = new ArrayList<Item>();
        totalValue = 0.0;
    }

    // A method that adds an item to the inventory
    public void addItem(Item item) {
        items.add(item);
        totalValue += item.getValue();
    }

    // A method that removes an item from the inventory by its item number
    public void removeItem(int itemNumber) {
        for (int i = 0; i < items.size(); i++) {
            Item item = items.get(i);
            if (item.getItemNumber() == itemNumber) {
                items.remove(i);
                totalValue -= item.getValue();
                break;
            }
        }
    }

    // A method that updates an item in the inventory by its item number
    public void updateItem(int itemNumber, String name, int quantity, double price, String category) {
        for (int i = 0; i < items.size(); i++) {
            Item item = items.get(i);
            if (item.getItemNumber() == itemNumber) {
                totalValue -= item.getValue();
                item.setName(name);
                item.setQuantity(quantity);
                item.setPrice(price);
                item.setCategory(category);
                totalValue += item.getValue();
                break;
            }
        }
    }

    // A method that returns an item from the inventory by its item number

    // Code blocks syntax from markdown
    // A method that returns an item from the inventory by its item number
    public Item getItem(int itemNumber) {
        for (Item item : items) {
            if (item.getItemNumber() == itemNumber) {
                return item;
            }
        }
        return null;
    }

    // A method that returns a list of items from the inventory that match a given name
    public ArrayList<Item> getItemsByName(String name) {
        ArrayList<Item> result = new ArrayList<Item>();
        for (Item item : items) {
            if (item.getName().toLowerCase().contains(name.toLowerCase())) {
                result.add(item);
            }
        }
        return result;
    }

    // A method that returns a list of items from the inventory that match a given category
    public ArrayList<Item> getItemsByCategory(String category) {
        ArrayList<Item> result = new ArrayList<Item>();
        for (Item item : items) {
            if (item.getCategory().equalsIgnoreCase(category)) {
                result.add(item);
            }
        }
        return result;
    }

    // A method that returns a list of items from the inventory that match a given price range
    public ArrayList<Item> getItemsByPrice(double min, double max) {
        ArrayList<Item> result = new ArrayList<Item>();
        for (Item item : items) {
            if (item.getPrice() >= min && item.getPrice() <= max) {
                result.add(item);
            }
        }
        return result;
    }

    // A method that returns a list of items from the inventory that match a given quantity range
    public ArrayList<Item> getItemsByQuantity(int min, int max) {
        ArrayList<Item> result = new ArrayList<Item>();
        for (Item item : items) {
            if (item.getQuantity() >= min && item.getQuantity() <= max) {
                result.add(item);
            }
        }
        return result;
    }

    // A method that sorts the items in the inventory by a given field and order
    public void sortItems(String field, String order) {
        Collections.sort(items, new Comparator<Item>() {
            public int compare(Item i1, Item i2) {
                switch (field) {
                    case "Item Number":
                        return Integer.compare(i1.getItemNumber(), i2.getItemNumber());
                    case "Name":
                        return i1.getName().compareTo(i2.getName());
                    case "Quantity":
                        return Integer.compare(i1.getQuantity(), i2.getQuantity());
                    case "Price":
                        return Double.compare(i1.getPrice(), i2.getPrice());
                    case "Category":
                        return i1.getCategory().compareTo(i2.getCategory());
                    default:
                        return 0;
                }
            }
        });
        if (order.equals("Descending")) {
            Collections.reverse(items);
        }
    }

    // A method that returns a list of all the items in the inventory
    public ArrayList<Item> getItems() {
        return items;
    }

    // A method that returns the total value of the inventory
    public double getTotalValue() {
        return totalValue;
    }

}

InventoryGUI.java
package com.company;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

class InventoryGUI extends JFrame implements ActionListener {

    private Inventory inventory; // the inventory object
    private JTable table; // the table to display the items
    private DefaultTableModel model; // the table model to store the data
    private JLabel totalValueLabel; // the label to display the total value of the inventory
    private JTextField searchField; // the text field to enter the search query
    private JComboBox<String> searchCombo; // the combo box to choose the search criterion
    private JComboBox<String> sortFieldCombo; // the combo box to choose the sort field
    private JComboBox<String> sortOrderCombo; // the combo box to choose the sort order
    private JTextField filterMinField; // the text field to enter the filter minimum value
    private JTextField filterMaxField; // the text field to enter the filter maximum value
    private JComboBox<String> filterCombo; // the combo box to choose the filter criterion
    private JComboBox<String> categoryCombo; // the combo box to choose the category

    // A constructor that creates and initializes the GUI components
    public InventoryGUI(Inventory inventory) {

        this.inventory = inventory;

        setTitle("Inventory Program");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel mainPanel = new JPanel(new BorderLayout());

        JPanel topPanel = new JPanel(new GridLayout(2, 1));


// Code blocks syntax from markdown
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        searchPanel.setBorder(BorderFactory.createTitledBorder("Search"));

        searchField = new JTextField(20);
        searchField.addActionListener(this);

        searchCombo = new JComboBox<String>(new String[]{"Item Number", "Name", "Category"});
        searchCombo.addActionListener(this);

        JButton searchButton = new JButton("Search");
        searchButton.addActionListener(this);

        searchPanel.add(new JLabel("Search by:"));
        searchPanel.add(searchCombo);
        searchPanel.add(searchField);
        searchPanel.add(searchButton);

        topPanel.add(searchPanel);

        JPanel sortFilterPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        sortFilterPanel.setBorder(BorderFactory.createTitledBorder("Sort and Filter"));

        sortFieldCombo = new JComboBox<String>(new String[]{"Item Number", "Name", "Quantity", "Price", "Category"});
        sortFieldCombo.addActionListener(this);

        sortOrderCombo = new JComboBox<String>(new String[]{"Ascending", "Descending"});
        sortOrderCombo.addActionListener(this);

        JButton sortButton = new JButton("Sort");
        sortButton.addActionListener(this);

        filterMinField = new JTextField(10);
        filterMinField.addActionListener(this);

        filterMaxField = new JTextField(10);
        filterMaxField.addActionListener(this);

        filterCombo = new JComboBox<String>(new String[]{"Price", "Quantity"});
        filterCombo.addActionListener(this);

        JButton filterButton = new JButton("Filter");
        filterButton.addActionListener(this);

        categoryCombo = new JComboBox<String>(new String[]{"All", "Clothing", "Electronics", "Food"});
        categoryCombo.addActionListener(this);

        JButton categoryButton = new JButton("Category");
        categoryButton.addActionListener(this);

        sortFilterPanel.add(new JLabel("Sort by:"));
        sortFilterPanel.add(sortFieldCombo);
        sortFilterPanel.add(sortOrderCombo);
        sortFilterPanel.add(sortButton);

// Code blocks syntax from markdown
        sortFilterPanel.add(new JLabel("Filter by:"));
        sortFilterPanel.add(filterCombo);
        sortFilterPanel.add(new JLabel("Min:"));
        sortFilterPanel.add(filterMinField);
        sortFilterPanel.add(new JLabel("Max:"));
        sortFilterPanel.add(filterMaxField);
        sortFilterPanel.add(filterButton);

        sortFilterPanel.add(new JLabel("Category:"));
        sortFilterPanel.add(categoryCombo);
        sortFilterPanel.add(categoryButton);

        topPanel.add(sortFilterPanel);

        mainPanel.add(topPanel, BorderLayout.NORTH);

        JPanel tablePanel = new JPanel(new BorderLayout());
        tablePanel.setBorder(BorderFactory.createTitledBorder("Items"));

        String[] columnNames = {"Item Number", "Name", "Quantity", "Price", "Category", "Value"};
        model = new DefaultTableModel(columnNames, 0);
        table = new JTable(model);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.setAutoCreateRowSorter(true);

        JScrollPane scrollPane = new JScrollPane(table);
        tablePanel.add(scrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));

        JButton addButton = new JButton("Add");
        addButton.addActionListener(this);

        JButton editButton = new JButton("Edit");
        editButton.addActionListener(this);


// Code blocks syntax from markdown
        JButton deleteButton = new JButton("Delete");
        deleteButton.addActionListener(this);

        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);

        tablePanel.add(buttonPanel, BorderLayout.SOUTH);

        mainPanel.add(tablePanel, BorderLayout.CENTER);

        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        bottomPanel.setBorder(BorderFactory.createTitledBorder("Total Value"));

        totalValueLabel = new JLabel(String.format("$%.2f", inventory.getTotalValue()));
        bottomPanel.add(totalValueLabel);

        mainPanel.add(bottomPanel, BorderLayout.SOUTH);

        add(mainPanel);

        populateTable(); // fill the table with the inventory data

        setVisible(true);
    }

    // A method that fills the table with the inventory data
    public void populateTable() {
        model.setRowCount(0); // clear the table
        for (Item item : inventory.getItems()) {
            Object[] row = {item.getItemNumber(), item.getName(), item.getQuantity(), item.getPrice(), item.getCategory(), item.getValue()};
            model.addRow(row); // add a row for each item
        }
    }

    // A method that handles the action events from the GUI components
    public void actionPerformed(ActionEvent e) {

// Code blocks syntax from markdown
        String command = e.getActionCommand();
        switch (command) {
            case "Search":
                String searchCriterion = (String) searchCombo.getSelectedItem();
                String searchQuery = searchField.getText().trim();
                if (!searchQuery.isEmpty()) {
                    ArrayList<Item> searchResult = new ArrayList<Item>();
                    switch (searchCriterion) {
                        case "Item Number":
                            try {
                                int itemNumber = Integer.parseInt(searchQuery);
                                Item item = inventory.getItem(itemNumber);
                                if (item != null) {
                                    searchResult.add(item);
                                }
                            } catch (NumberFormatException ex) {
                                JOptionPane.showMessageDialog(this, "Invalid item number.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                            break;
                        case "Name":
                            searchResult = inventory.getItemsByName(searchQuery);
                            break;
                        case "Category":
                            searchResult = inventory.getItemsByCategory(searchQuery);
                            break;
                    }
                    if (!searchResult.isEmpty()) {
                        model.setRowCount(0); // clear the table
                        for (Item item : searchResult) {
                            Object[] row = {item.getItemNumber(), item.getName(), item.getQuantity(), item.getPrice(), item.getCategory(), item.getValue()};
                            model.addRow(row); // add a row for each item
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No items found.", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    populateTable(); // restore the original table
                }
                break;
            case "Sort":
                String sortField = (String) sortFieldCombo.getSelectedItem();
                String sortOrder = (String) sortOrderCombo.getSelectedItem();
                inventory.sortItems(sortField, sortOrder);
                populateTable(); // update the table
                break;
            case "Filter":
                String filterCriterion = (String) filterCombo.getSelectedItem();
                String filterMin = filterMinField.getText().trim();
                String filterMax = filterMaxField.getText().trim();
                if (!filterMin.isEmpty() && !filterMax.isEmpty()) {
                    try {
                        ArrayList<Item> filterResult = new ArrayList<Item>();
                        switch (filterCriterion) {
                            case "Price":
                                double minPrice = Double.parseDouble(filterMin);
                                double maxPrice = Double.parseDouble(filterMax);
                                filterResult = inventory.getItemsByPrice(minPrice, maxPrice);
                                break;
                            case "Quantity":
                                int minQuantity = Integer.parseInt(filterMin);
                                int maxQuantity = Integer.parseInt(filterMax);
                                filterResult = inventory.getItemsByQuantity(minQuantity, maxQuantity);
                                break;
                        }
                        if (!filterResult.isEmpty()) {
                            model.setRowCount(0); // clear the table
                            for (Item item : filterResult) {
                                Object[] row = {item.getItemNumber(), item.getName(), item.getQuantity(), item.getPrice(), item.getCategory(), item.getValue()};
                                model.addRow(row); // add a row for each item
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "No items found.", "Information", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(this, "Invalid input.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    populateTable(); // restore the original table
                }
                break;
            case "Category":
                String category = (String) categoryCombo.getSelectedItem();
                if (!category.equals("All")) {
                    ArrayList<Item> categoryResult = inventory.getItemsByCategory(category);
                    if (!categoryResult.isEmpty()) {
                        model.setRowCount(0); // clear the table
                        for (Item item : categoryResult) {
                            Object[] row = {item.getItemNumber(), item.getName(), item.getQuantity(), item.getPrice(), item.getCategory(), item.getValue()};
                            model.addRow(row); // add a row for each item
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No items found.", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    populateTable(); // restore the original table
                }
                break;
            case "Add":
                addItem(); // call a method to add a new item
                break;
            case "Edit":
                editItem(); // call a method to edit an existing item
                break;
            case "Delete":
                deleteItem(); // call a method to delete an existing item
                break;
        }
    }

    // A method that adds a new item to the inventory
    public void addItem() {
        JTextField numberField = new JTextField(10);
        JTextField nameField = new JTextField(10);
        JTextField quantityField = new JTextField(10);
        JTextField priceField = new JTextField(10);

// Code blocks syntax from markdown
        JComboBox<String> categoryField = new JComboBox<String>(new String[]{"Clothing", "Electronics", "Food"});
        JPanel panel = new JPanel(new GridLayout(5, 2));
        panel.add(new JLabel("Item Number:"));
        panel.add(numberField);
        panel.add(new JLabel("Name:"));
        panel.add(nameField);
        panel.add(new JLabel("Quantity:"));
        panel.add(quantityField);
        panel.add(new JLabel("Price:"));
        panel.add(priceField);
        panel.add(new JLabel("Category:"));
        panel.add(categoryField);
        int result = JOptionPane.showConfirmDialog(this, panel, "Add Item", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            try {
                int itemNumber = Integer.parseInt(numberField.getText());
                String name = nameField.getText();
                int quantity = Integer.parseInt(quantityField.getText());
                double price = Double.parseDouble(priceField.getText());
                String category = (String) categoryField.getSelectedItem();
                if (itemNumber > 0 && !name.isEmpty() && quantity >= 0 && price >= 0) {
                    Item item = new Item(itemNumber, name, quantity, price, category);
                    inventory.addItem(item);
                    populateTable(); // update the table
                    totalValueLabel.setText(String.format("$%.2f", inventory.getTotalValue())); // update the total value
                    JOptionPane.showMessageDialog(this, "Item added successfully.", "Information", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Invalid input.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid input.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // A method that edits an existing item in the inventory
    public void editItem() {
        int row = table.getSelectedRow();
        if (row != -1) {
            int itemNumber = (int) table.getValueAt(row, 0);
            Item item = inventory.getItem(itemNumber);
            JTextField numberField = new JTextField(String.valueOf(item.getItemNumber()));
            numberField.setEditable(false); // item number cannot be changed
            JTextField nameField = new JTextField(item.getName());
            JTextField quantityField = new JTextField(String.valueOf(item.getQuantity()));
            JTextField priceField = new JTextField(String.valueOf(item.getPrice()));
            JComboBox<String> categoryField = new JComboBox<String>(new String[]{"Clothing", "Electronics", "Food"});
            categoryField.setSelectedItem(item.getCategory());
            JPanel panel = new JPanel(new GridLayout(5, 2));
            panel.add(new JLabel("Item Number:"));
            panel.add(numberField);

// Code blocks syntax from markdown
            panel.add(new JLabel("Name:"));
            panel.add(nameField);
            panel.add(new JLabel("Quantity:"));
            panel.add(quantityField);
            panel.add(new JLabel("Price:"));
            panel.add(priceField);
            panel.add(new JLabel("Category:"));
            panel.add(categoryField);
            int result = JOptionPane.showConfirmDialog(this, panel, "Edit Item", JOptionPane.OK_CANCEL_OPTION);
            if (result == JOptionPane.OK_OPTION) {
                try {
                    String name = nameField.getText();
                    int quantity = Integer.parseInt(quantityField.getText());
                    double price = Double.parseDouble(priceField.getText());
                    String category = (String) categoryField.getSelectedItem();
                    if (!name.isEmpty() && quantity >= 0 && price >= 0) {
                        inventory.updateItem(itemNumber, name, quantity, price, category);
                        populateTable(); // update the table
                        totalValueLabel.setText(String.format("$%.2f", inventory.getTotalValue())); // update the total value
                        JOptionPane.showMessageDialog(this, "Item updated successfully.", "Information", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Invalid input.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Invalid input.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "No item selected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // A method that deletes an existing item from the inventory
    public void deleteItem() {
        int row = table.getSelectedRow();
        if (row != -1) {
            int itemNumber = (int) table.getValueAt(row, 0);
            Item item = inventory.getItem(itemNumber);
            int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this item?\n" + item, "Delete Item", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                inventory.removeItem(itemNumber);
                populateTable(); // update the table
                totalValueLabel.setText(String.format("$%.2f", inventory.getTotalValue())); // update the total value
                JOptionPane.showMessageDialog(this, "Item deleted successfully.", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No item selected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}

Item.java
package com.company;

public class Item {
    private int itemNumber; // a unique identifier for the item
    private String name; // the name of the item
    private int quantity; // the number of units in stock
    private double price; // the price of each unit
    private String category; // the category of the item

    // A constructor that initializes the item with the given parameters
    public Item(int itemNumber, String name, int quantity, double price, String category) {
        this.itemNumber = itemNumber;
        this.name = name;
        this.quantity = quantity;
        this.price = price;
        this.category = category;
    }

    // Getters and setters for the item fields
    public int getItemNumber() {
        return itemNumber;
    }

    public void setItemNumber(int itemNumber) {
        this.itemNumber = itemNumber;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    // A method that returns the value of the inventory of this item
    public double getValue() {
        return quantity * price;
    }

    // A method that returns a string representation of this item
    public String toString() {
        return "Item Number: " + itemNumber + ", Name: " + name + ", Quantity: " + quantity + ", Price: " + price + ", Category: " + category + ", Value: " + getValue();
    }
}
