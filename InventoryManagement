// Code for an inventory management program using JavaFX

// Importing the necessary libraries
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import java.io.*;
import java.sql.*;
import java.util.ArrayList;

// Creating a class for items
class Item {
    // Declaring the fields
    private String name;
    private double price;
    private int quantity;
    private String category;

    // Creating a constructor
    public Item(String name, double price, int quantity, String category) {
        this.name = name;
        this.price = price;
        this.quantity = quantity;
        this.category = category;
    }

    // Creating getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }
}

// Creating a class for inventory management
class InventoryManager {
    // Declaring the fields
    private ObservableList<Item> items; // A list of items in the inventory
    private Connection connection; // A connection to the database
    private PreparedStatement statement; // A statement for executing SQL queries
    private ResultSet resultSet; // A result set for storing query results

    // Creating a constructor
    public InventoryManager() {
        items = FXCollections.observableArrayList(); // Initializing the list of items
        connectToDatabase(); // Connecting to the database
        loadItemsFromDatabase(); // Loading items from the database
    }

    // Creating a method to connect to the database
    public void connectToDatabase() {
        try {
            // Loading the driver class
            Class.forName("com.mysql.cj.jdbc.Driver");
            // Establishing the connection
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/inventory", "root", "password");
            System.out.println("Connected to the database");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Creating a method to load items from the database
    public void loadItemsFromDatabase() {
        try {
            // Creating a query to select all items from the table
            statement = connection.prepareStatement("SELECT * FROM items");
            // Executing the query and storing the results
            resultSet = statement.executeQuery();
            // Looping through the result set and adding items to the list
            while (resultSet.next()) {
                String name = resultSet.getString("name");
                double price = resultSet.getDouble("price");
                int quantity = resultSet.getInt("quantity");
                String category = resultSet.getString("category");
                Item item = new Item(name, price, quantity, category);
                items.add(item);
            }
            System.out.println("Loaded items from the database");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Creating a method to add an item to the inventory and the database
    public void addItem(Item item) {
        try {
            // Adding the item to the list
            items.add(item);
            // Creating a query to insert the item into the table
            statement = connection.prepareStatement("INSERT INTO items (name, price, quantity, category) VALUES (?, ?, ?, ?)");
            statement.setString(1, item.getName());
            statement.setDouble(2, item.getPrice());
            statement.setInt(3, item.getQuantity());
            statement.setString(4, item.getCategory());
            // Executing the query and updating the table
            statement.executeUpdate();
            System.out.println("Added an item to the inventory and the database");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Creating a method to remove an item from the inventory and the database
    public void removeItem(Item item) {
        try {
            // Removing the item from the list
            items.remove(item);
            // Creating a query to delete the item from the table
            statement = connection.prepareStatement("DELETE FROM items WHERE name = ?");
            statement.setString(1, item.getName());
            // Executing the query and updating the table
            statement.executeUpdate();
            System.out.println("Removed an item from the inventory and the database");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Creating a method to update an item in the inventory and the database
    public void updateItem(Item oldItem, Item newItem) {
        try {
            // Replacing the old item with the new item in the list
            int index = items.indexOf(oldItem);
            items.set(index, newItem);
            // Creating a query to update the item in the table
            statement = connection.prepareStatement("UPDATE items SET name = ?, price = ?, quantity = ?, category = ? WHERE name = ?");
            statement.setString(1, newItem.getName());
            statement.setDouble(2, newItem.getPrice());
            statement.setInt(3, newItem.getQuantity());
            statement.setString(4, newItem.getCategory());
            statement.setString(5, oldItem.getName());
            // Executing the query and updating the table
            statement.executeUpdate();
            System.out.println("Updated an item in the inventory and the database");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Creating a method to sort items by a given field and order
    public void sortItems(String field, String order) {
        try {
            // Creating a query to select all items from the table and order them by the given field and order
            statement = connection.prepareStatement("SELECT * FROM items ORDER BY " + field + " " + order);
            // Executing the query and storing the results
            resultSet = statement.executeQuery();
            // Clearing the list of items
            items.clear();
            // Looping through the result set and adding items to the list in sorted order
            while (resultSet.next()) {
                String name = resultSet.getString("name");
                double price = resultSet.getDouble("price");
                int quantity = resultSet.getInt("quantity");
                String category = resultSet.getString("category");
                Item item = new Item(name, price, quantity, category);
                items.add(item);
            }
            System.out.println("Sorted items by " + field + " " + order);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Creating a method to filter items by a given criterion and value
    public ObservableList<Item> filterItems(String criterion, Object value) {
        // Creating a new list to store the filtered items
        ObservableList<Item> filteredItems = FXCollections.observableArrayList();
        // Looping through the list of items and checking if they match the given criterion and value
        for (Item item : items) {
            switch (criterion) {
                case "name":
                    if (item.getName().contains((String) value)) {
                        filteredItems.add(item);
                    }
                    break;
                case "price":
                    if (item.getPrice() == (double) value) {
                        filteredItems.add(item);
                    }
                    break;
                case "quantity":
                    if (item.getQuantity() == (int) value) {
                        filteredItems.add(item);
                    }
                    break;
                case "category":
                    if (item.getCategory().equals((String) value)) {
                        filteredItems.add(item);
                    }
                    break;
                default:
                    break;
            }
        }
        System.out.println("Filtered items by " + criterion + " " + value);
        return filteredItems; // Returning the filtered list
    }

    // Creating a method to categorize items by a given category
    public ObservableList<Item> categorizeItems(String category) {
        // Creating a new list to store the categorized items
        ObservableList<Item> categorizedItems = FXCollections.observableArrayList();
        // Looping through the list of items and checking if they belong to the given category
        for (Item item : items) {
            if (item.getCategory().equals(category)) {
                categorizedItems.add(item);
            }
        }
        System.out.println("Categorized items by " + category);
        return categorizedItems; // Returning the categorized list
    }

    // Creating a method to import/load items from a given file format and name
    public void importItems(String fileFormat, String fileName) {
        try { 
        // Creating a method to import/load items from a given file format and name
    public void importItems(String fileFormat, String fileName) {
        try {
            // Creating a file object with the given file name
            File file = new File(fileName);
            // Checking if the file exists and is readable
            if (file.exists() && file.canRead()) {
                // Clearing the list of items
                items.clear();
                // Clearing the table in the database
                statement = connection.prepareStatement("TRUNCATE TABLE items");
                statement.executeUpdate();
                // Creating a buffered reader to read from the file
                BufferedReader reader = new BufferedReader(new FileReader(file));
                // Reading the first line of the file and ignoring it (assuming it contains the headers)
                reader.readLine();
                // Reading the rest of the lines of the file and parsing them
                String line;
                while ((line = reader.readLine()) != null) {
                    // Splitting the line by commas or tabs depending on the file format
                    String[] tokens = fileFormat.equals("CSV") ? line.split(",") : line.split("\t");
                    // Extracting the item information from the tokens
                    String name = tokens[0];
                    double price = Double.parseDouble(tokens[1]);
                    int quantity = Integer.parseInt(tokens[2]);
                    String category = tokens[3];
                    // Creating an item object with the information
                    Item item = new Item(name, price, quantity, category);
                    // Adding the item to the list and the database
                    addItem(item);
                }
                // Closing the reader
                reader.close();
                System.out.println("Imported items from " + fileName);
            } else {
                System.out.println("File not found or not readable");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Creating a method to export/save items to a given file format and name
    public void exportItems(String fileFormat, String fileName) {
        try {
            // Creating a file object with the given file name
            File file = new File(fileName);
            // Checking if the file does not exist or is writable
            if (!file.exists() || file.canWrite()) {
                // Creating a buffered writer to write to the file
                BufferedWriter writer = new BufferedWriter(new FileWriter(file));
                // Writing the headers to the file depending on the file format
                writer.write(fileFormat.equals("CSV") ? "Name,Price,Quantity,Category\n" : "Name\tPrice\tQuantity\tCategory\n");
                // Looping through the list of items and writing them to the file
                for (Item item : items) {
                    // Formatting the item information depending on the file format
                    String line = fileFormat.equals("CSV") ?
                            item.getName() + "," + item.getPrice() + "," + item.getQuantity() + "," + item.getCategory() + "\n" :
                            item.getName() + "\t" + item.getPrice() + "\t" + item.getQuantity() + "\t" + item.getCategory() + "\n";
                    // Writing the line to the file
                    writer.write(line);
                }
                // Closing the writer
                writer.close();
                System.out.println("Exported items to " + fileName);
            } else {
                System.out.println("File already exists or not writable");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Creating a method to get the list of items
    public ObservableList<Item> getItems() {
        return items;
    }
}
// Creating a class that extends Application
public class InventoryApp extends Application {
    // Declaring the fields
    private InventoryManager inventoryManager; // An instance of the inventory management class
    private TableView<Item> partTable; // A table to display the parts in the inventory
    private TableView<Item> productTable; // A table to display the products in the inventory
    private TextField partSearchField; // A text field to search for parts by name
    private TextField productSearchField; // A text field to search for products by name
    private Label partLabel; // A label to show the number of parts in the inventory
    private Label productLabel; // A label to show the number of products in the inventory

    // Creating a method to start the application
    @Override
    public void start(Stage primaryStage) {
        // Creating an instance of the inventory manager
        inventoryManager = new InventoryManager();

        // Creating a border pane as the root layout
        BorderPane root = new BorderPane();

        // Creating a menu bar with different menus and menu items
        MenuBar menuBar = new MenuBar();
        Menu fileMenu = new Menu("File");
        MenuItem importItem = new MenuItem("Import");
        MenuItem exportItem = new MenuItem("Export");
        MenuItem exitItem = new MenuItem("Exit");
        fileMenu.getItems().addAll(importItem, exportItem, exitItem);
        Menu editMenu = new Menu("Edit");
        MenuItem addItem = new MenuItem("Add");
        MenuItem modifyItem = new MenuItem("Modify");
        MenuItem deleteItem = new MenuItem("Delete");
        editMenu.getItems().addAll(addItem, modifyItem, deleteItem);
        Menu viewMenu = new Menu("View");
        MenuItem sortItem = new MenuItem("Sort");
        MenuItem filterItem = new MenuItem("Filter");
        MenuItem categorizeItem = new MenuItem("Categorize");
        viewMenu.getItems().addAll(sortItem, filterItem, categorizeItem);
        Menu helpMenu = new Menu("Help");
        MenuItem aboutItem = new MenuItem("About");
        helpMenu.getItems().add(aboutItem);
        menuBar.getMenus().addAll(fileMenu, editMenu, viewMenu, helpMenu);

        // Setting the menu bar to the top of the border pane
        root.setTop(menuBar);

        // Creating a label for the application title
        Label titleLabel = new Label("Inventory Management System");

        // Creating a horizontal box to hold the title label and align it to the center
        HBox titleBox = new HBox();
        titleBox.getChildren().add(titleLabel);
        titleBox.setAlignment(Pos.CENTER);

        // Setting some padding and spacing for the title box
        titleBox.setPadding(new Insets(10));
        titleBox.setSpacing(10);
/ Creating a label for the application title
        Label titleLabel = new Label("Inventory Management System");

        // Creating a horizontal box to hold the title label and align it to the center
        HBox titleBox = new HBox();
        titleBox.getChildren().add(titleLabel);
        titleBox.setAlignment(Pos.CENTER);

        // Setting some padding and spacing for the title box
        titleBox.setPadding(new Insets(10));
        titleBox.setSpacing(10);

        // Setting the title box to the center of the border pane
        root.setCenter(titleBox);

        // Creating a label for the parts
        partLabel = new Label("Parts: " + inventoryManager.getItems().size());

        // Creating a text field for searching parts by name
        partSearchField = new TextField();
        partSearchField.setPromptText("Enter part name");

        // Creating a button for searching parts by name
        Button partSearchButton = new Button("Search");

        // Creating a horizontal box to hold the part label, search field and button
        HBox partSearchBox = new HBox();
        partSearchBox.getChildren().addAll(partLabel, partSearchField, partSearchButton);

        // Setting some padding and spacing for the part search box
        partSearchBox.setPadding(new Insets(10));
        partSearchBox.setSpacing(10);

        // Creating a table to display the parts in the inventory
        partTable = new TableView<>();

        // Creating columns for the table and setting their cell value factories
        TableColumn<Item, String> partNameColumn = new TableColumn<>("Name");
        partNameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        TableColumn<Item, Double> partPriceColumn = new TableColumn<>("Price");
        partPriceColumn.setCellValueFactory(new PropertyValueFactory<>("price"));
        TableColumn<Item, Integer> partQuantityColumn = new TableColumn<>("Quantity");
        partQuantityColumn.setCellValueFactory(new PropertyValueFactory<>("quantity"));
        TableColumn<Item, String> partCategoryColumn = new TableColumn<>("Category");
        partCategoryColumn.setCellValueFactory(new PropertyValueFactory<>("category"));

        // Adding the columns to the table
        partTable.getColumns().addAll(partNameColumn, partPriceColumn, partQuantityColumn, partCategoryColumn);

        // Setting the items of the table to the list of items from the inventory manager
        partTable.setItems(inventoryManager.getItems());

        // Creating a vertical box to hold the part search box and table
        VBox partBox = new VBox();
        partBox.getChildren().addAll(partSearchBox, partTable);

        // Setting some padding and spacing for the part box
        partBox.setPadding(new Insets(10));
        partBox.setSpacing(10);

        // Creating a label for the products
        productLabel = new Label("Products: " + inventoryManager.getItems().size());

        // Creating a text field for searching products by name
        productSearchField = new TextField();
        productSearchField.setPromptText("Enter product name");

        // Creating a button for searching products by name
        Button productSearchButton = new Button("Search");

        // Creating a horizontal box to hold the product label, search field and button
        HBox productSearchBox = new HBox();
        productSearchBox.getChildren().addAll(productLabel, productSearchField, productSearchButton);

        // Setting some padding and spacing for the product search box
        productSearchBox.setPadding(new Insets(10));
        // Creating a label for the products
        productLabel = new Label("Products: " + inventoryManager.getItems().size());

        // Creating a text field for searching products by name
        productSearchField = new TextField();
        productSearchField.setPromptText("Enter product name");

        // Creating a button for searching products by name
        Button productSearchButton = new Button("Search");

        // Creating a horizontal box to hold the product label, search field and button
        HBox productSearchBox = new HBox();
        productSearchBox.getChildren().addAll(productLabel, productSearchField, productSearchButton);

        // Setting some padding and spacing for the product search box
        productSearchBox.setPadding(new Insets(10));
        productSearchBox.setSpacing(10);

        // Creating a table to display the products in the inventory
        productTable = new TableView<>();

        // Creating columns for the table and setting their cell value factories
        TableColumn<Item, String> productNameColumn = new TableColumn<>("Name");
        productNameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        TableColumn<Item, Double> productPriceColumn = new TableColumn<>("Price");
        productPriceColumn.setCellValueFactory(new PropertyValueFactory<>("price"));
        TableColumn<Item, Integer> productQuantityColumn = new TableColumn<>("Quantity");
        productQuantityColumn.setCellValueFactory(new PropertyValueFactory<>("quantity"));
        TableColumn<Item, String> productCategoryColumn = new TableColumn<>("Category");
        productCategoryColumn.setCellValueFactory(new PropertyValueFactory<>("category"));

        // Adding the columns to the table
        productTable.getColumns().addAll(productNameColumn, productPriceColumn, productQuantityColumn, productCategoryColumn);

        // Setting the items of the table to the list of items from the inventory manager
        productTable.setItems(inventoryManager.getItems());

        // Creating a vertical box to hold the product search box and table
        VBox productBox = new VBox();
        productBox.getChildren().addAll(productSearchBox, productTable);

        // Setting some padding and spacing for the product box
        productBox.setPadding(new Insets(10));
        productBox.setSpacing(10);

        // Creating a horizontal box to hold the part box and the product box
        HBox itemBox = new HBox();
        itemBox.getChildren().addAll(partBox, productBox);

        // Setting some padding and spacing for the item box
        itemBox.setPadding(new Insets(10));
        itemBox.setSpacing(10);

        // Setting the item box to the bottom of the border pane
        root.setBottom(itemBox);

        // Creating a scene with the root layout and a given width and height
        Scene scene = new Scene(root, 800, 600);
    // Setting the title of the primary stage
        primaryStage.setTitle("Inventory Management System");

        // Setting the scene of the primary stage
        primaryStage.setScene(scene);

        // Showing the primary stage
        primaryStage.show();

        // Adding event handlers for the menu items
        importItem.setOnAction(e -> handleImportItem());
        exportItem.setOnAction(e -> handleExportItem());
        exitItem.setOnAction(e -> handleExitItem());
        addItem.setOnAction(e -> handleAddItem());
        modifyItem.setOnAction(e -> handleModifyItem());
        deleteItem.setOnAction(e -> handleDeleteItem());
        sortItem.setOnAction(e -> handleSortItem());
        filterItem.setOnAction(e -> handleFilterItem());
        categorizeItem.setOnAction(e -> handleCategorizeItem());
        aboutItem.setOnAction(e -> handleAboutItem());

        // Adding event handlers for the search buttons
        partSearchButton.setOnAction(e -> handlePartSearchButton());
        productSearchButton.setOnAction(e -> handleProductSearchButton());

    }

    // Creating a method to handle the import item menu item
    public void handleImportItem() {
        // Creating a dialog to let the user choose the file format and name
        Dialog<String[]> dialog = new Dialog<>();
        dialog.setTitle("Import Items");
        dialog.setHeaderText("Choose the file format and name to import items from");

        // Creating a combo box to let the user choose the file format
        ComboBox<String> fileFormatBox = new ComboBox<>();
        fileFormatBox.getItems().addAll("CSV", "Excel", "TXT");
        fileFormatBox.setPromptText("File Format");

        // Creating a text field to let the user enter the file name
        TextField fileNameField = new TextField();
        fileNameField.setPromptText("File Name");

        // Creating a grid pane to hold the combo box and text field
        GridPane gridPane = new GridPane();
        gridPane.add(new Label("File Format:"), 0, 0);
        gridPane.add(fileFormatBox, 1, 0);
        gridPane.add(new Label("File Name:"), 0, 1);
        gridPane.add(fileNameField, 1, 1);

        // Setting some padding and spacing for the grid pane
        gridPane.setPadding(new Insets(10));
        // Creating a method to handle the import item menu item
    public void handleImportItem() {
        // Creating a dialog to let the user choose the file format and name
        Dialog<String[]> dialog = new Dialog<>();
        dialog.setTitle("Import Items");
        dialog.setHeaderText("Choose the file format and name to import items from");

        // Creating a combo box to let the user choose the file format
        ComboBox<String> fileFormatBox = new ComboBox<>();
        fileFormatBox.getItems().addAll("CSV", "Excel", "TXT");
        fileFormatBox.setPromptText("File Format");

        // Creating a text field to let the user enter the file name
        TextField fileNameField = new TextField();
        fileNameField.setPromptText("File Name");

        // Creating a grid pane to hold the combo box and text field
        GridPane gridPane = new GridPane();
        gridPane.add(new Label("File Format:"), 0, 0);
        gridPane.add(fileFormatBox, 1, 0);
        gridPane.add(new Label("File Name:"), 0, 1);
        gridPane.add(fileNameField, 1, 1);

        // Setting some padding and spacing for the grid pane
        gridPane.setPadding(new Insets(10));
        gridPane.setHgap(10);
        gridPane.setVgap(10);

        // Setting the content of the dialog to the grid pane
        dialog.getDialogPane().setContent(gridPane);

        // Adding an OK and a Cancel button to the dialog
        ButtonType okButton = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE);
        ButtonType cancelButton = new ButtonType("Cancel", ButtonBar.ButtonData.CANCEL_CLOSE);
        dialog.getDialogPane().getButtonTypes().addAll(okButton, cancelButton);

        // Setting the result converter of the dialog to return an array of strings containing the file format and name
        dialog.setResultConverter(button -> {
            if (button == okButton) {
                String fileFormat = fileFormatBox.getValue();
                String fileName = fileNameField.getText();
                return new String[]{fileFormat, fileName};
            } else {
                return null;
            }
        });

        // Showing the dialog and getting the result
        Optional<String[]> result = dialog.showAndWait();

        // Checking if the result is present and not empty
        if (result.isPresent() && !result.get()[0].isEmpty() && !result.get()[1].isEmpty()) {
            // Getting the file format and name from the result
            String fileFormat = result.get()[0];
            String fileName = result.get()[1];
            // Calling the importItems method of the inventory manager with the file format and name
            inventoryManager.importItems(fileFormat, fileName);
            // Updating the labels for parts and products
            partLabel.setText("Parts: " + inventoryManager.getItems().size());
            productLabel.setText("Products: " + inventoryManager.getItems().size());
            // Showing an alert to inform the user that the items have been imported successfully
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Import Items");
            alert.setHeaderText(null);
            alert.setContentText("Items have been imported successfully from " + fileName);
            alert.showAndWait();
        } else {
            // Showing an alert to inform the user that the import has been cancelled or invalid
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Import Items");
            alert.setHeaderText(null);
            alert.setContentText("Import has been cancelled or invalid");
            alert.showAndWait();
            // Creating a method to handle the import item menu item
    public void handleImportItem() {
        // Creating a dialog to let the user choose the file format and name
        Dialog<String[]> dialog = new Dialog<>();
        dialog.setTitle("Import Items");
        dialog.setHeaderText("Choose the file format and name to import items from");

        // Creating a combo box to let the user choose the file format
        ComboBox<String> fileFormatBox = new ComboBox<>();
        fileFormatBox.getItems().addAll("CSV", "Excel", "TXT");
        fileFormatBox.setPromptText("File Format");

        // Creating a text field to let the user enter the file name
        TextField fileNameField = new TextField();
        fileNameField.setPromptText("File Name");

        // Creating a grid pane to hold the combo box and text field
        GridPane gridPane = new GridPane();
        gridPane.add(new Label("File Format:"), 0, 0);
        gridPane.add(fileFormatBox, 1, 0);
        gridPane.add(new Label("File Name:"), 0, 1);
        gridPane.add(fileNameField, 1, 1);

        // Setting some padding and spacing for the grid pane
        gridPane.setPadding(new Insets(10));
        gridPane.setHgap(10);
        gridPane.setVgap(10);

        // Setting the content of the dialog to the grid pane
        dialog.getDialogPane().setContent(gridPane);

        // Adding an OK and a Cancel button to the dialog
        ButtonType okButton = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE);
        ButtonType cancelButton = new ButtonType("Cancel", ButtonBar.ButtonData.CANCEL_CLOSE);
        dialog.getDialogPane().getButtonTypes().addAll(okButton, cancelButton);

        // Setting the result converter of the dialog to return an array of strings containing the file format and name
        dialog.setResultConverter(button -> {
            if (button == okButton) {
                String fileFormat = fileFormatBox.getValue();
                String fileName = fileNameField.getText();
                return new String[]{fileFormat, fileName};
            } else {
                return null;
            }
        });

        // Showing the dialog and getting the result
        Optional<String[]> result = dialog.showAndWait();

        // Checking if the result is present and not empty
        if (result.isPresent() && !result.get()[0].isEmpty() && !result.get()[1].isEmpty()) {
            // Getting the file format and name from the result
            String fileFormat = result.get()[0];
            String fileName = result.get()[1];
            // Calling the importItems method of the inventory manager with the file format and name
            inventoryManager.importItems(fileFormat, fileName);
            // Updating the labels for parts and products
            partLabel.setText("Parts: " + inventoryManager.getItems().size());
            productLabel.setText("Products: " + inventoryManager.getItems().size());
            // Showing an alert to inform the user that the items have been imported successfully
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Import Items");
            alert.setHeaderText(null);
            alert.setContentText("Items have been imported successfully from " + fileName);
            alert.showAndWait();
        } else {
            // Showing an alert to inform the user that the import has been cancelled or invalid
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Import Items");
            alert.setHeaderText(null);
            alert.setContentText("Import has been cancelled or invalid");
            alert.showAndWait();
            // Creating a method to handle the export item menu item
    public void handleExportItem() {
        // Creating a dialog to let the user choose the file format and name
        Dialog<String[]> dialog = new Dialog<>();
        dialog.setTitle("Export Items");
        dialog.setHeaderText("Choose the file format and name to export items to");

        // Creating a combo box to let the user choose the file format
        ComboBox<String> fileFormatBox = new ComboBox<>();
        fileFormatBox.getItems().addAll("CSV", "Excel", "TXT");
        fileFormatBox.setPromptText("File Format");

        // Creating a text field to let the user enter the file name
        TextField fileNameField = new TextField();
        fileNameField.setPromptText("File Name");

        // Creating a grid pane to hold the combo box and text field
        GridPane gridPane = new GridPane();
        gridPane.add(new Label("File Format:"), 0, 0);
        gridPane.add(fileFormatBox, 1, 0);
        gridPane.add(new Label("File Name:"), 0, 1);
        gridPane.add(fileNameField, 1, 1);

        // Setting some padding and spacing for the grid pane
        gridPane.setPadding(new Insets(10));
        gridPane.setHgap(10);
        gridPane.setVgap(10);

        // Setting the content of the dialog to the grid pane
        dialog.getDialogPane().setContent(gridPane);

        // Adding an OK and a Cancel button to the dialog
        ButtonType okButton = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE);
        ButtonType cancelButton = new ButtonType("Cancel", ButtonBar.ButtonData.CANCEL_CLOSE);
        dialog.getDialogPane().getButtonTypes().addAll(okButton, cancelButton);

        // Setting the result converter of the dialog to return an array of strings containing the file format and name
        dialog.setResultConverter(button -> {
            if (button == okButton) {
                String fileFormat = fileFormatBox.getValue();
                String fileName = fileNameField.getText();
                return new String[]{fileFormat, fileName};
            } else {
                return null;
            }
        });

        // Showing the dialog and getting the result
        Optional<String[]> result = dialog.showAndWait();

        // Checking if the result is present and not empty
        if (result.isPresent() && !result.get()[0].isEmpty() && !result.get()[1].isEmpty()) {
            // Getting the file format and name from the result
            String fileFormat = result.get()[0];
            String fileName = result.get()[1];
            // Calling the exportItems method of the inventory manager with the file format and name
            inventoryManager.exportItems(fileFormat, fileName);
            // Showing an alert to inform the user that the items have been exported successfully
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Export Items");
            alert.setHeaderText(null);
            alert.setContentText("Items have been exported successfully to " + fileName);
            alert.showAndWait();
            // Creating a method to handle the exit item menu item
    public void handleExitItem() {
        // Showing a confirmation dialog to ask the user if they want to exit the application
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Exit");
        alert.setHeaderText(null);
        alert.setContentText("Are you sure you want to exit the application?");
        Optional<ButtonType> result = alert.showAndWait();
        // Checking if the user clicked OK
        if (result.isPresent() && result.get() == ButtonType.OK) {
            // Exiting the application
            System.exit(0);
        }
    }

    // Creating a method to handle the add item menu item
    public void handleAddItem() {
        // Creating a dialog to let the user enter the item information
        Dialog<Item> dialog = new Dialog<>();
        dialog.setTitle("Add Item");
        dialog.setHeaderText("Enter the item information");

        // Creating text fields to let the user enter the item name, price, quantity and category
        TextField nameField = new TextField();
        nameField.setPromptText("Name");
        TextField priceField = new TextField();
        priceField.setPromptText("Price");
        TextField quantityField = new TextField();
        quantityField.setPromptText("Quantity");
        TextField categoryField = new TextField();
        categoryField.setPromptText("Category");

        // Creating a grid pane to hold the text fields and their labels
        GridPane gridPane = new GridPane();
        gridPane.add(new Label("Name:"), 0, 0);
        gridPane.add(nameField, 1, 0);
        gridPane.add(new Label("Price:"), 0, 1);
        gridPane.add(priceField, 1, 1);
        gridPane.add(new Label("Quantity:"), 0, 2);
        gridPane.add(quantityField, 1, 2);
        gridPane.add(new Label("Category:"), 0, 3);
        gridPane.add(categoryField, 1, 3);

        // Setting some padding and spacing for the grid pane
        // Creating a method to handle the add item menu item
    public void handleAddItem() {
        // Creating a dialog to let the user enter the item information
        Dialog<Item> dialog = new Dialog<>();
        dialog.setTitle("Add Item");
        dialog.setHeaderText("Enter the item information");

        // Creating text fields to let the user enter the item name, price, quantity and category
        TextField nameField = new TextField();
        nameField.setPromptText("Name");
        TextField priceField = new TextField();
        priceField.setPromptText("Price");
        TextField quantityField = new TextField();
        quantityField.setPromptText("Quantity");
        TextField categoryField = new TextField();
        categoryField.setPromptText("Category");

        // Creating a grid pane to hold the text fields and their labels
        GridPane gridPane = new GridPane();
        gridPane.add(new Label("Name:"), 0, 0);
        gridPane.add(nameField, 1, 0);
        gridPane.add(new Label("Price:"), 0, 1);
        gridPane.add(priceField, 1, 1);
        gridPane.add(new Label("Quantity:"), 0, 2);
        gridPane.add(quantityField, 1, 2);
        gridPane.add(new Label("Category:"), 0, 3);
        gridPane.add(categoryField, 1, 3);

        // Setting some padding and spacing for the grid pane
        gridPane.setPadding(new Insets(10));
        gridPane.setHgap(10);
        gridPane.setVgap(10);

        // Setting the content of the dialog to the grid pane
        dialog.getDialogPane().setContent(gridPane);

        // Adding an OK and a Cancel button to the dialog
        ButtonType okButton = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE);
        ButtonType cancelButton = new ButtonType("Cancel", ButtonBar.ButtonData.CANCEL_CLOSE);
        dialog.getDialogPane().getButtonTypes().addAll(okButton, cancelButton);

        // Setting the result converter of the dialog to return an item object with the entered information
        dialog.setResultConverter(button -> {
            if (button == okButton) {
                String name = nameField.getText();
                double price = Double.parseDouble(priceField.getText());
                int quantity = Integer.parseInt(quantityField.getText());
                String category = categoryField.getText();
                return new Item(name, price, quantity, category);
            } else {
                return null;
            }
        });

        // Showing the dialog and getting the result
        Optional<Item> result = dialog.showAndWait();

        // Checking if the result is present and not null
        if (result.isPresent() && result.get() != null) {
            // Getting the item from the result
            Item item = result.get();
            // Calling the addItem method of the inventory manager with the item
            inventoryManager.addItem(item);
            // Updating the labels for parts and products
            partLabel.setText("Parts: " + inventoryManager.getItems().size());
            productLabel.setText("Products: " + inventoryManager.getItems().size());
            // Showing an alert to inform the user that the item has been added successfully
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Add Item");
            alert.setHeaderText(null);
            // Creating a method to handle the add item menu item
    public void handleAddItem() {
        // Creating a dialog to let the user enter the item information
        Dialog<Item> dialog = new Dialog<>();
        dialog.setTitle("Add Item");
        dialog.setHeaderText("Enter the item information");

        // Creating text fields to let the user enter the item name, price, quantity and category
        TextField nameField = new TextField();
        nameField.setPromptText("Name");
        TextField priceField = new TextField();
        priceField.setPromptText("Price");
        TextField quantityField = new TextField();
        quantityField.setPromptText("Quantity");
        TextField categoryField = new TextField();
        categoryField.setPromptText("Category");

        // Creating a grid pane to hold the text fields and their labels
        GridPane gridPane = new GridPane();
        gridPane.add(new Label("Name:"), 0, 0);
        gridPane.add(nameField, 1, 0);
        gridPane.add(new Label("Price:"), 0, 1);
        gridPane.add(priceField, 1, 1);
        gridPane.add(new Label("Quantity:"), 0, 2);
        gridPane.add(quantityField, 1, 2);
        gridPane.add(new Label("Category:"), 0, 3);
        gridPane.add(categoryField, 1, 3);

        // Setting some padding and spacing for the grid pane
        gridPane.setPadding(new Insets(10));
        gridPane.setHgap(10);
        gridPane.setVgap(10);

        // Setting the content of the dialog to the grid pane
        dialog.getDialogPane().setContent(gridPane);

        // Adding an OK and a Cancel button to the dialog
        ButtonType okButton = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE);
        ButtonType cancelButton = new ButtonType("Cancel", ButtonBar.ButtonData.CANCEL_CLOSE);
        dialog.getDialogPane().getButtonTypes().addAll(okButton, cancelButton);

        // Setting the result converter of the dialog to return an item object with the entered information
        dialog.setResultConverter(button -> {
            if (button == okButton) {
                String name = nameField.getText();
                double price = Double.parseDouble(priceField.getText());
                int quantity = Integer.parseInt(quantityField.getText());
                String category = categoryField.getText();
                return new Item(name, price, quantity, category);
            } else {
                return null;
            }
        });

        // Showing the dialog and getting the result
        Optional<Item> result = dialog.showAndWait();

        // Checking if the result is present and not null
        if (result.isPresent() && result.get() != null) {
            // Getting the item from the result
            Item item = result.get();
            // Calling the addItem method of the inventory manager with the item
            inventoryManager.addItem(item);
            // Updating the labels for parts and products
            partLabel.setText("Parts: " + inventoryManager.getItems().size());
            productLabel.setText("Products: " + inventoryManager.getItems().size());
            // Showing an alert to inform the user that the item has been added successfully
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Add Item");
            alert.setHeaderText(null);
            alert.setContentText("Item has been added successfully");
            alert.showAndWait();
            // Creating a method to handle the modify item menu item
    public void handleModifyItem() {
        // Getting the selected item from the part table or the product table
        Item selectedItem = partTable.getSelectionModel().getSelectedItem() != null ?
                partTable.getSelectionModel().getSelectedItem() : productTable.getSelectionModel().getSelectedItem();
        // Checking if an item is selected
        if (selectedItem != null) {
            // Creating a dialog to let the user modify the item information
            Dialog<Item> dialog = new Dialog<>();
            dialog.setTitle("Modify Item");
            dialog.setHeaderText("Modify the item information");

            // Creating text fields to let the user modify the item name, price, quantity and category
            TextField nameField = new TextField(selectedItem.getName());
            TextField priceField = new TextField(String.valueOf(selectedItem.getPrice()));
            TextField quantityField = new TextField(String.valueOf(selectedItem.getQuantity()));
            TextField categoryField = new TextField(selectedItem.getCategory());

            // Creating a grid pane to hold the text fields and their labels
            GridPane gridPane = new GridPane();
            gridPane.add(new Label("Name:"), 0, 0);
            gridPane.add(nameField, 1, 0);
            gridPane.add(new Label("Price:"), 0, 1);
            gridPane.add(priceField, 1, 1);
            gridPane.add(new Label("Quantity:"), 0, 2);
            gridPane.add(quantityField, 1, 2);
            gridPane.add(new Label("Category:"), 0, 3);
            gridPane.add(categoryField, 1, 3);

            // Setting some padding and spacing for the grid pane
            // Creating a method to handle the modify item menu item
    public void handleModifyItem() {
        // Getting the selected item from the part table or the product table
        Item selectedItem = partTable.getSelectionModel().getSelectedItem() != null ?
                partTable.getSelectionModel().getSelectedItem() : productTable.getSelectionModel().getSelectedItem();
        // Checking if an item is selected
        if (selectedItem != null) {
            // Creating a dialog to let the user modify the item information
            Dialog<Item> dialog = new Dialog<>();
            dialog.setTitle("Modify Item");
            dialog.setHeaderText("Modify the item information");

            // Creating text fields to let the user modify the item name, price, quantity and category
            TextField nameField = new TextField(selectedItem.getName());
            TextField priceField = new TextField(String.valueOf(selectedItem.getPrice()));
            TextField quantityField = new TextField(String.valueOf(selectedItem.getQuantity()));
            TextField categoryField = new TextField(selectedItem.getCategory());

            // Creating a grid pane to hold the text fields and their labels
            GridPane gridPane = new GridPane();
            gridPane.add(new Label("Name:"), 0, 0);
            gridPane.add(nameField, 1, 0);
            gridPane.add(new Label("Price:"), 0, 1);
            gridPane.add(priceField, 1, 1);
            gridPane.add(new Label("Quantity:"), 0, 2);
            gridPane.add(quantityField, 1, 2);
            gridPane.add(new Label("Category:"), 0, 3);
            gridPane.add(categoryField, 1, 3);

            // Setting some padding and spacing for the grid pane
            gridPane.setPadding(new Insets(10));
            gridPane.setHgap(10);
            gridPane.setVgap(10);

            // Setting the content of the dialog to the grid pane
            dialog.getDialogPane().setContent(gridPane);

            // Adding an OK and a Cancel button to the dialog
            ButtonType okButton = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE);
            ButtonType cancelButton = new ButtonType("Cancel", ButtonBar.ButtonData.CANCEL_CLOSE);
            dialog.getDialogPane().getButtonTypes().addAll(okButton, cancelButton);

            // Setting the result converter of the dialog to return an item object with the modified information
            dialog.setResultConverter(button -> {
                if (button == okButton) {
                    String name = nameField.getText();
                    double price = Double.parseDouble(priceField.getText());
                    int quantity = Integer.parseInt(quantityField.getText());
                    String category = categoryField.getText();
                    return new Item(name, price, quantity, category);
                } else {
                    return null;
                }
            });

            // Showing the dialog and getting the result
            // Creating a method to handle the modify item menu item
    public void handleModifyItem() {
        // Getting the selected item from the part table or the product table
        Item selectedItem = partTable.getSelectionModel().getSelectedItem() != null ?
                partTable.getSelectionModel().getSelectedItem() : productTable.getSelectionModel().getSelectedItem();
        // Checking if an item is selected
        if (selectedItem != null) {
            // Creating a dialog to let the user modify the item information
            Dialog<Item> dialog = new Dialog<>();
            dialog.setTitle("Modify Item");
            dialog.setHeaderText("Modify the item information");

            // Creating text fields to let the user modify the item name, price, quantity and category
            TextField nameField = new TextField(selectedItem.getName());
            TextField priceField = new TextField(String.valueOf(selectedItem.getPrice()));
            TextField quantityField = new TextField(String.valueOf(selectedItem.getQuantity()));
            TextField categoryField = new TextField(selectedItem.getCategory());

            // Creating a grid pane to hold the text fields and their labels
            GridPane gridPane = new GridPane();
            gridPane.add(new Label("Name:"), 0, 0);
            gridPane.add(nameField, 1, 0);
            gridPane.add(new Label("Price:"), 0, 1);
            gridPane.add(priceField, 1, 1);
            gridPane.add(new Label("Quantity:"), 0, 2);
            gridPane.add(quantityField, 1, 2);
            gridPane.add(new Label("Category:"), 0, 3);
            gridPane.add(categoryField, 1, 3);

            // Setting some padding and spacing for the grid pane
            gridPane.setPadding(new Insets(10));
            gridPane.setHgap(10);
            gridPane.setVgap(10);

            // Setting the content of the dialog to the grid pane
            dialog.getDialogPane().setContent(gridPane);

            // Adding an OK and a Cancel button to the dialog
            ButtonType okButton = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE);
            ButtonType cancelButton = new ButtonType("Cancel", ButtonBar.ButtonData.CANCEL_CLOSE);
            dialog.getDialogPane().getButtonTypes().addAll(okButton, cancelButton);

            // Setting the result converter of the dialog to return an item object with the modified information
            dialog.setResultConverter(button -> {
                if (button == okButton) {
                    String name = nameField.getText();
                    double price = Double.parseDouble(priceField.getText());
                    int quantity = Integer.parseInt(quantityField.getText());
                    String category = categoryField.getText();
                    return new Item(name, price, quantity, category);
                } else {
                    return null;
                }
            });

            // Showing the dialog and getting the result
            Optional<Item> result = dialog.showAndWait();

            // Checking if the result is present and not null
            // Creating a method to handle the modify item menu item
    public void handleModifyItem() {
        // Getting the selected item from the part table or the product table
        Item selectedItem = partTable.getSelectionModel().getSelectedItem() != null ?
                partTable.getSelectionModel().getSelectedItem() : productTable.getSelectionModel().getSelectedItem();
        // Checking if an item is selected
        if (selectedItem != null) {
            // Creating a dialog to let the user modify the item information
            Dialog<Item> dialog = new Dialog<>();
            dialog.setTitle("Modify Item");
            dialog.setHeaderText("Modify the item information");

            // Creating text fields to let the user modify the item name, price, quantity and category
            TextField nameField = new TextField(selectedItem.getName());
            TextField priceField = new TextField(String.valueOf(selectedItem.getPrice()));
            TextField quantityField = new TextField(String.valueOf(selectedItem.getQuantity()));
            TextField categoryField = new TextField(selectedItem.getCategory());

            // Creating a grid pane to hold the text fields and their labels
            GridPane gridPane = new GridPane();
            gridPane.add(new Label("Name:"), 0, 0);
            gridPane.add(nameField, 1, 0);
            gridPane.add(new Label("Price:"), 0, 1);
            gridPane.add(priceField, 1, 1);
            gridPane.add(new Label("Quantity:"), 0, 2);
            gridPane.add(quantityField, 1, 2);
            gridPane.add(new Label("Category:"), 0, 3);
            gridPane.add(categoryField, 1, 3);

            // Setting some padding and spacing for the grid pane
            gridPane.setPadding(new Insets(10));
            gridPane.setHgap(10);
            gridPane.setVgap(10);

            // Setting the content of the dialog to the grid pane
            dialog.getDialogPane().setContent(gridPane);

            // Adding an OK and a Cancel button to the dialog
            ButtonType okButton = new ButtonType("OK", ButtonBar.ButtonData.OK_DONE);
            ButtonType cancelButton = new ButtonType("Cancel", ButtonBar.ButtonData.CANCEL_CLOSE);
            dialog.getDialogPane().getButtonTypes().addAll(okButton, cancelButton);

            // Setting the result converter of the dialog to return an item object with the modified information
            dialog.setResultConverter(button -> {
                if (button == okButton) {
                    String name = nameField.getText();
                    double price = Double.parseDouble(priceField.getText());
                    int quantity = Integer.parseInt(quantityField.getText());
                    String category = categoryField.getText();
                    return new Item(name, price, quantity, category);
                } else {
                    return null;
                }
            });

            // Showing the dialog and getting the result
            Optional<Item> result = dialog.showAndWait();

            // Checking if the result is present and not null
            if (result.isPresent() && result.get() != null) {
                // Getting the modified item from the result
                Item modifiedItem = result.get();
                // Calling the updateItem method of the inventory manager with the selected item and the modified item
                inventoryManager.updateItem(selectedItem, modifiedItem);
                // Showing an alert to inform the user that the item has been modified successfully
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Modify Item");
                alert.setHeaderText(null);
                alert.setContentText("Item has been modified successfully");
                alert.showAndWait();
                // Creating a method to handle the delete item menu item
    public void handleDeleteItem() {
        // Getting the selected item from the part table or the product table
        Item selectedItem = partTable.getSelectionModel().getSelectedItem() != null ?
                partTable.getSelectionModel().getSelectedItem() : productTable.getSelectionModel().getSelectedItem();
        // Checking if an item is selected
        if (selectedItem != null) {
            // Showing a confirmation dialog to ask the user if they want to delete the item
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Delete Item");
            alert.setHeaderText(null);
            alert.setContentText("Are you sure you want to delete the item?");
            Optional<ButtonType> result = alert.showAndWait();
            // Checking if the user clicked OK
            if (result.isPresent() && result.get() == ButtonType.OK) {
                // Calling the deleteItem method of the inventory manager with the selected item
                inventoryManager.deleteItem(selectedItem);
                // Updating the labels for parts and products
                partLabel.setText("Parts: " + inventoryManager.getItems().size());
                productLabel.setText("Products: " + inventoryManager.getItems().size());
                // Showing an alert to inform the user that the item has been deleted successfully
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Delete Item");
                alert.setHeaderText(null);
                alert.setContentText("Item has been deleted successfully");
                alert.showAndWait();
                // Creating a method to handle the delete item menu item
    public void handleDeleteItem() {
        // Getting the selected item from the part table or the product table
        Item selectedItem = partTable.getSelectionModel().getSelectedItem() != null ?
                partTable.getSelectionModel().getSelectedItem() : productTable.getSelectionModel().getSelectedItem();
        // Checking if an item is selected
        if (selectedItem != null) {
            // Showing a confirmation dialog to ask the user if they want to delete the item
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Delete Item");
            alert.setHeaderText(null);
            alert.setContentText("Are you sure you want to delete the item?");
            Optional<ButtonType> result = alert.showAndWait();
            // Checking if the user clicked OK
            if (result.isPresent() && result.get() == ButtonType.OK) {
                // Calling the deleteItem method of the inventory manager with the selected item
                inventoryManager.deleteItem(selectedItem);
                // Updating the labels for parts and products
                partLabel.setText("Parts: " + inventoryManager.getItems().size());
                productLabel.setText("Products: " + inventoryManager.getItems().size());
                // Showing an alert to inform the user that the item has been deleted successfully
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setTitle("Delete Item");
                alert.setHeaderText(null);
                alert.setContentText("Item has been deleted successfully");
                alert.showAndWait();
            }
        } else {
            // Showing an alert to inform the user that no item is selected
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Delete Item");
            alert.setHeaderText(null);
            alert.setContentText("No item is selected");
            alert.showAndWait();
        }
    }

    // Creating a method to handle the sort item menu item
    public void handleSortItem() {
        // Creating a dialog to let the user choose the sorting criteria and order
        Dialog<String[]> dialog = new Dialog<>();
        dialog.setTitle("Sort Items");
        dialog.setHeaderText("Choose the sorting criteria and order");

        // Creating a combo box to let the user choose the sorting criteria
        ComboBox<String> criteriaBox = new ComboBox<>();
        criteriaBox.getItems().addAll("Name", "Price", "Quantity", "Category");
        criteriaBox.setPromptText("Criteria");

        // Creating a combo box to let the user choose the sorting order
        ComboBox<String> orderBox = new ComboBox<>();
        orderBox.getItems().addAll("Ascending", "Descending");
        orderBox.setPromptText("Order");

        // Creating a grid pane to hold the combo boxes and their labels
